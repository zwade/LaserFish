<html>
<body>
	<canvas id="main" width = "500" height = "400"> </canvas>
</body>
</html>

<script src = fabric.js></script>
<script src = handler.js></script>
<script src = emitter.js></script>
<script src = mirror.js></script>

<script>
WIDTH = 21
GRIDW = 40
HEIGHT = 21
GRIDH = 40

var handler
var activeLaser = []

canvas = document.getElementById('main')
	
canvas.width = WIDTH*GRIDW + 2*GRIDW
canvas.height = WIDTH*GRIDH	

can = new fabric.Canvas('main')
can.selection = false

var x,y

function genId() {
	t = new Date()
	return t.getTime()
}
function laser(path,color) {
	color = color || "white"
	tmp = new fabric.Line(path, {strokeWidth:5, fill:color})
	tmp.selectable = false
	return tmp
}
function drawLaser(path) {
	clearLasers()
	for (i = 0; i < path.length; i+=2) {
		activeLaser[activeLaser.length] = laser([path[i][0]*GRIDW+GRIDW,path[i][1]*GRIDH+GRIDH,path[i+1][0]*GRIDW+GRIDW,path[i+1][1]*GRIDH+GRIDH])
	}
	renderLasers()
}
function renderLasers() {
	for (i in activeLaser) {
		can.add(activeLaser[i])
	}
}
function clearLasers() {
	for (i in activeLaser) {
		can.remove(activeLaser[i])
	}
	activeLaser =[]
}
function laserPath(x,y,dir) {
	var ret = [[x,y]]
	while (dir>=4) {
		dir-=4
	}
	if (dir == 0) {
		x++
	}
	if (dir == 1) {
		y++
	}
	if (dir == 2) {
		x--
	}
	if (dir == 3) {
		y--
	}
	while(x>=0 && y>=0 && x< WIDTH && y < HEIGHT) {
		if (handler.getObject(x,y)) {
			ret[ret.length] = [x,y]
			tmp  = handler.getObject(x,y).calculateLaser(dir)
			if (tmp) {
				dir = tmp[0]
				ret[ret.length] = [x,y]
				x = tmp[1]
				y = tmp[2]
				ret[ret.lenght] = [x,y]
			} else {
				return ret
			}
		}
		while (dir>=4) {
			dir-=4
		}
		if (dir == 0) {
			x++
		}
		if (dir == 1) {
			y++
		}
		if (dir == 2) {
			x--
		}
		if (dir == 3) {
			y--
		}

	}
	ret[ret.length] = [x,y]
	return ret
}
function inCanvas(obj) {
	id = obj.id
	for (i in can.getObjects()) {
		if (can.getObjects()[i].id == id) {
			return true
		}
	}
	return false
}
function drawLevel(level,cb) {
	//can.setBackgroundImage('background.jpg',function() {
	//})
	handler = new canvasGrid(can,WIDTH,HEIGHT)
	can.renderAll()
	cb()
}	
function theta2(obj) {
	a = Math.round(obj.getAngle()/(45))
	return a
}
function theta(obj) {
	a = Math.round(obj.getAngle()/(90))
	return a
}
function lockXY(obj) {
	obj.parent.preMove()
	if (!obj.isMovable) {
		return
	}
	obj.parent.isBanked = false
	if (GRIDW/2<=obj.getLeft() && obj.getLeft()<WIDTH*GRIDW-GRIDW/2) {
		obj.setLeft(Math.round(obj.getLeft()/GRIDW)*GRIDW)
	} else {
		console.log('banking')
		obj.parent.isBanked = true
		obj.setLeft(WIDTH*GRIDW+GRIDW)
		obj.setTop(GRIDH+20)
	}					
	if (GRIDH/2<=obj.getTop() && obj.getTop()<HEIGHT*GRIDH-GRIDH/2) {
		obj.setTop(Math.round(obj.getTop()/GRIDH)*GRIDH)
	} else {
		console.log('banking')
		obj.parent.isBanked = true
		obj.setLeft(WIDTH*GRIDW+GRIDW)
		obj.setTop(GRIDH+20)
	}
	obj.setCoords()
	obj.parent.updateCoords()
	can.renderAll()
}
function drawGrid() {
	for (i = 0; i < WIDTH+2; i++) {
		tmp = new fabric.Line([i*GRIDW+20,0,i*GRIDW+20,HEIGHT*GRIDH], {stroke:5})
		tmp.selectable = false
		can.add(tmp)
	}
	for (i = 0; i < HEIGHT; i++) {								
		tmp  = new fabric.Line([0,i*GRIDW+20,HEIGHT*GRIDH,i*GRIDW+20], {stroke:5})
		tmp.selectable = false
		can.add(tmp)
	}
}
can.observe('mouse:up',function(e){
	if (e.target && e.target.isMovable) {
		tmp = e.target.parent
		lockXY(e.target)
		if (tmp.ox==tmp.nx && tmp.oy==tmp.ny) {
			tmp.changeAngle()
		}
		handler.moveObject(e.target.parent.ox,e.target.parent.oy,e.target.parent.nx,e.target.parent.ny)
	}
	can.renderAll()
})

function renderLevel(l) {
	level = levelSet[l]

}
function drawTest() {
	can.backgroundColor = "#06f"
	why = new mirror(1,2,1)
	ex = new emitter(1,1,1)
	handler.setObject(1,1,ex)
	handler.setObject(1,2,why)
	y2 = new mirror(1,3,1)
	handler.setObject(1,3,y2)
}

function start() { 
	drawLevel(1,drawTest)
}
window.onload = function() { start() }
</script>
</html>
